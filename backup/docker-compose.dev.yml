services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_job_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.dev
    environment:
      DATABASE_URL: postgresql://postgres:password@db:5432/ai_job_platform
      GROK_API_KEY: ${GROK_API_KEY:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      DASHSCOPE_API_KEY: ${DASHSCOPE_API_KEY:-}
      ZAI_API_KEY: ${ZAI_API_KEY:-}
      DEFAULT_AI_AGENT: ${DEFAULT_AI_AGENT:-openai}
      MAX_WORKERS: ${MAX_WORKERS:-8}
      GDRIVE_FOLDER_ID: ${GDRIVE_FOLDER_ID:-}
      # Docker-friendly paths
      DATA_DIR: /app/data
      OUTPUT_DIR: /app/output
      TEMP_DIR: /app/temp
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      # Mount source code for hot reloading
      - .:/app
      # Exclude node_modules and venv from volume mount to avoid conflicts
      - /app/frontend/node_modules
      - /app/venv
      # Mount data directories for file access
      - ./data:/app/data
      - ./output:/app/output
      - ./temp:/app/temp
    command: uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      VITE_API_URL: ""
    volumes:
      # Mount frontend source code for hot reloading
      - ./frontend:/app
      # Exclude node_modules to avoid conflicts
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0 --port 3000

volumes:
  postgres_data: