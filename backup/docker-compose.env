# =============================================================================
# DOCKER ENVIRONMENT CONFIGURATION STRATEGY
# =============================================================================
#
# This file explains the different Docker environments available and how to use them.
#
# OVERVIEW OF ENVIRONMENTS:
# ------------------------
# 1. docker-compose.yml (Main/Default) - Hybrid development with nginx proxy
# 2. docker-compose.dev.yml - Direct development access (no nginx)
# 3. docker-compose.production.yml - Full production setup with SSL
# 4. docker-compose.dev-parallel.yml - Development alongside production
# 5. docker-compose.prod-parallel.yml - Full production parallel setup
#
# =============================================================================

# =============================================================================
# ENVIRONMENT 1: MAIN (docker-compose.yml) - RECOMMENDED FOR DEVELOPMENT
# =============================================================================
# Features:
# - Nginx reverse proxy with configurable SSL
# - Internal networking between services
# - Health checks and restart policies
# - Environment variable configuration
#
# Usage:
#   docker-compose up -d                    # Start all services
#   docker-compose down                     # Stop all services
#   docker-compose logs -f                  # View logs
#
# Environment Variables:
#   FRONTEND_API_URL=http://localhost/api   # For development
#   POSTGRES_PASSWORD=your_secure_password  # Override default
#   NGINX_CONFIG_FILE=./nginx.prod.conf     # Use production nginx config
#
# =============================================================================

# =============================================================================
# ENVIRONMENT 2: DIRECT DEVELOPMENT (docker-compose.dev.yml)
# =============================================================================
# Features:
# - Direct access to services (no nginx proxy)
# - Hot reloading for development
# - Database port exposed for direct access
# - Separate dev Dockerfiles
#
# Usage:
#   docker-compose -f docker-compose.dev.yml up -d
#   docker-compose -f docker-compose.dev.yml down
#
# Access Services Directly:
#   Backend API: http://localhost:8000
#   Frontend: http://localhost:3000
#   Database: postgresql://localhost:5432/ai_job_platform
#
# =============================================================================

# =============================================================================
# ENVIRONMENT 3: PRODUCTION (docker-compose.production.yml)
# =============================================================================
# Features:
# - Secure database password from environment
# - Database initialization script
# - Health checks for all services
# - Nginx with SSL certificates
# - Proper networking isolation
#
# Usage:
#   docker-compose -f docker-compose.production.yml up -d
#
# Required Environment Variables:
#   POSTGRES_PASSWORD=your_secure_password
#   FRONTEND_API_URL=https://yourdomain.com
#
# =============================================================================

# =============================================================================
# ENVIRONMENT 4: PARALLEL DEVELOPMENT (docker-compose.dev-parallel.yml)
# =============================================================================
# Features:
# - Runs development frontend alongside production backend
# - Uses production backend and database
# - Separate ports to avoid conflicts
# - Connects to production network
#
# Usage:
#   # First start production environment:
#   docker-compose -f docker-compose.prod-parallel.yml up -d
#
#   # Then start development environment:
#   docker-compose -f docker-compose.dev-parallel.yml up -d
#
# Access Services:
#   Production: https://yourdomain.com
#   Development Frontend: http://localhost:8080
#   Development API: Uses production backend
#
# =============================================================================

# =============================================================================
# ENVIRONMENT 5: FULL PARALLEL PRODUCTION (docker-compose.prod-parallel.yml)
# =============================================================================
# Features:
# - Complete separate production environment
# - Different database (ai_job_platform_prod)
# - Standard production ports
# - Full SSL setup with certbot
#
# Usage:
#   docker-compose -f docker-compose.prod-parallel.yml up -d
#
# Required Environment Variables:
#   POSTGRES_PASSWORD=your_secure_password
#
# =============================================================================

# =============================================================================
# QUICK START COMMANDS
# =============================================================================

# Development (Recommended):
docker-compose up -d

# Direct Development:
docker-compose -f docker-compose.dev.yml up -d

# Production:
docker-compose -f docker-compose.production.yml up -d

# Parallel Development:
docker-compose -f docker-compose.prod-parallel.yml up -d
docker-compose -f docker-compose.dev-parallel.yml up -d

# =============================================================================

# =============================================================================
# ENVIRONMENT VARIABLE REFERENCE
# =============================================================================

# Database Configuration:
#   POSTGRES_PASSWORD=password              # Database password
#   POSTGRES_DB=ai_job_platform            # Database name

# API Configuration:
#   GROK_API_KEY=your_key                  # AI service API keys
#   GEMINI_API_KEY=your_key
#   OPENAI_API_KEY=your_key
#   DEEPSEEK_API_KEY=your_key
#   DASHSCOPE_API_KEY=your_key
#   ZAI_API_KEY=your_key
#   DEFAULT_AI_AGENT=openai                # Default AI agent

# Frontend Configuration:
#   FRONTEND_API_URL=http://localhost/api  # API URL for frontend
#   VITE_API_URL=http://localhost/api      # Vite-specific (auto-set)

# Nginx Configuration:
#   NGINX_CONFIG_FILE=./nginx.dev.conf     # Nginx config file
#   NGINX_CONFIG_FILE=./nginx.prod.conf    # Production nginx config

# Development Configuration:
#   MAX_WORKERS=8                          # Backend worker threads

# =============================================================================

# =============================================================================
# TROUBLESHOOTING
# =============================================================================

# Check container status:
#   docker-compose ps

# View logs:
#   docker-compose logs -f [service-name]

# Restart specific service:
#   docker-compose restart [service-name]

# Rebuild containers:
#   docker-compose up -d --build

# Clean up everything:
#   docker-compose down -v --remove-orphans

# =============================================================================